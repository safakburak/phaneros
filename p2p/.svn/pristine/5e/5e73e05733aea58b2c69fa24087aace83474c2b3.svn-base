package p2p.application.peer.components;

import p2p.application.messages.PositionUpdate;
import p2p.application.messages.PatchUpdate;
import p2p.application.peer.Peer;
import p2p.network.IEndPoint;
import p2p.network.IMessageListener;
import p2p.visibility.VisibilityMap;

public class UpdateTracker
{
	private Peer mOwner;
	
	private IEndPoint mEndPoint;
	
	private VisibilityMap mVisibility;

	
	public UpdateTracker(Peer owner, IEndPoint endPoint, VisibilityMap visibility) 
	{
		mOwner = owner;
		
		mEndPoint = endPoint;
		
		mVisibility = visibility;
		
		mEndPoint.addMessageListener(PositionUpdate.class, new IMessageListener<PositionUpdate>() {
			@Override
			public void onMessage(PositionUpdate message, String source) 
			{
				if(source.equals(mOwner.mId) == false)
				{
					mOwner.peerPoses.put(source, message.getPosition());
				}
			}
		});
		
		mEndPoint.addMessageListener(PatchUpdate.class, new IMessageListener<PatchUpdate>() {
			public void onMessage(PatchUpdate message, String source) 
			{
				if(source.equals(mOwner.mId) == false)
				{
					if(mVisibility.get(mOwner.currentPatch).contains(message.getNewPatchPos()) == false)
					{
						mOwner.peerPoses.remove(source);
					}
				}
			};
		});
	}
}
