package p2p.geometry.halfplanes;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;

import p2p.geometry.primitives.Halfplane;
import p2p.geometry.primitives.Line;
import p2p.geometry.primitives.Point;
import p2p.geometry.primitives.Polygon;

/**
 *
 * @author MSDubov
 */
public class MainFrame extends javax.swing.JFrame {

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        setLocationRelativeTo(null);
        halfplanes = Halfplane.boundingRectangle(-10000, 10000, -10000, 10000);
        state = 0;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel() {
            @Override
            public void paintComponent(Graphics g) {

                g.clearRect(0, 0, this.getWidth(), this.getHeight());

                int x1, x2, y1, y2;

                for(Halfplane h : halfplanes) {

                    if (h.getLine().isVertical()) {
                        y1 = 0;
                        y2 = this.getHeight();
                        x1 = (int)h.getLine().XforY(y1);
                        x2 = (int)h.getLine().XforY(y2);
                    } else {
                        x1 = 0;
                        x2 = this.getWidth();
                        y1 = (int)h.getLine().YforX(x1);
                        y2 = (int)h.getLine().YforX(x2);
                    }

                    g.setColor(Color.BLACK);
                    g.drawLine(x1, this.getHeight() - y1,
                        x2, this.getHeight() - y2);

                    g.setColor(Color.LIGHT_GRAY);
                    int m = h.isLeftBoundary() ? 1 : -1;
                    int n = m * (h.getLine().isAscending() ? 1 : -1);
                    if (! h.getLine().isVertical() &&
                        Math.abs(h.getLine().YforX(0) -
                            h.getLine().YforX(1)) < 1) {
                        m = 0;
                    } else {
                        n = 0;
                    }

                    for (int j = 1; j <= 6; j++) {
                        g.drawLine(x1+j*m, this.getHeight()-y1+j*n,
                            x2+j*m, this.getHeight()-y2+j*n);
                    }
                }

                if (state == 1) { // Текущая полуплоскость
                    g.setColor(Color.BLACK);
                    g.drawLine((int)pStart.getX(),
                        this.getHeight() - (int)pStart.getY(),
                        (int)mouseX,
                        (int)mouseY);

                    g.setColor(Color.LIGHT_GRAY);
                    int m = (this.getHeight() - pStart.getY() > mouseY) ? 1 : -1;
                    int n = (pStart.getX() > mouseX) ? -1 : 1;
                    if (Math.abs(this.getHeight() - pStart.getY() - mouseY) >
                        Math.abs(pStart.getX() - mouseX)) {
                        n = 0;
                    } else {
                        m = 0;
                    }
                    for (int j = 1; j <= 6; j++) {
                        g.drawLine((int)pStart.getX()+j*m,
                            this.getHeight()-(int)pStart.getY()+j*n,
                            (int)mouseX+j*m,
                            (int)mouseY+j*n);
                    }
                }

                if (state == 2) { // Рисуем пересечение

                    g.setColor(Color.RED);

                    Point cur, next;
                    for(int i = 0; i < intersection.size(); i++) {
                        cur = intersection.get(i);
                        next = intersection.get((i + 1) % intersection.size());
                        for (int j = -1; j <= 2; j++) {
                            g.drawLine((int)cur.getX()+((j+1)/2), (int)(getHeight()-cur.getY()+(j/2)),
                                (int)next.getX()+((j+1)/2), (int)(getHeight()-next.getY()+(j/2)));
                        }
                    }

                    /*g.setColor(Color.GREEN);
                    for(int i = 0; i < chains.get(0).size(); i++) {
                        for(Halfplane h : chains.get(0)) {

                            if (h.getLine().isVertical()) {
                                y1 = 0;
                                y2 = this.getHeight();
                                x1 = (int)h.getLine().XforY(y1);
                                x2 = (int)h.getLine().XforY(y2);
                            } else {
                                x1 = 0;
                                x2 = this.getWidth();
                                y1 = (int)h.getLine().YforX(x1);
                                y2 = (int)h.getLine().YforX(x2);
                            }

                            g.drawLine(x1, this.getHeight() - y1,
                                x2, this.getHeight() - y2);
                            g.drawLine(x1+1, this.getHeight() - y1,
                                x2+1, this.getHeight() - y2);
                        }
                    }
                    g.setColor(Color.BLUE);
                    for(int i = 0; i < chains.get(1).size(); i++) {
                        for(Halfplane h : chains.get(1)) {
                            if (h.getLine().isVertical()) {
                                y1 = 0;
                                y2 = this.getHeight();
                                x1 = (int)h.getLine().XforY(y1);
                                x2 = (int)h.getLine().XforY(y2);
                            } else {
                                x1 = 0;
                                x2 = this.getWidth();
                                y1 = (int)h.getLine().YforX(x1);
                                y2 = (int)h.getLine().YforX(x2);
                            }

                            g.drawLine(x1, this.getHeight() - y1,
                                x2, this.getHeight() - y2);
                            g.drawLine(x1+1, this.getHeight() - y1,
                                x2+1, this.getHeight() - y2);
                        }
                    }*/
                }
            }
        };
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Halfplanes intersection");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 653, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 303, Short.MAX_VALUE)
        );

        jButton3.setText("Naive - O(n²)");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton1.setText("Sweeping line - O(n∙log(n))");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jButton4.setText("Clear");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton2.setText("Halfplanes only");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        intersection = new Polygon();//HalfplaneIntersection.intersectHalfplanes_DivideAndConquer(halfplanes);
        
        state = 2;
        
        jPanel1.repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        intersection = HalfplanesIntersection.intersectHalfplanes_Naive(halfplanes);
        //chains = HalfplaneIntersection.intersectHalfplanes_Naive(halfplanes);
                
        state = 2;
        
        jPanel1.repaint();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
        halfplanes = Halfplane.boundingRectangle(-10000, 10000, -10000, 10000);
        state = 0;
        
        jPanel1.repaint();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        if (state == 0) {
            pStart = new Point(evt.getX(), jPanel1.getHeight() - evt.getY());
            state = 1;
        } else if (state == 1) {
            pEnd = new Point(evt.getX(), jPanel1.getHeight() - evt.getY());
            
            boolean isRightSide = pStart.getY() < pEnd.getY();
            if (pStart.getY() == pEnd.getY()) {
                isRightSide = pStart.getX() < pEnd.getX();
            }
            
            halfplanes.add(new Halfplane(new Line(pStart, pEnd), isRightSide));
            state = 0;
        }
        
        jPanel1.repaint();
    }//GEN-LAST:event_jPanel1MousePressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        state = 0;
        
        jPanel1.repaint();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        mouseX = evt.getX();
        mouseY = evt.getY();
        
        jPanel1.repaint();
    }//GEN-LAST:event_jPanel1MouseMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables

    private ArrayList<Halfplane> halfplanes;
    //private ArrayList<ArrayList<Halfplane>> chains;
    private Polygon intersection;
    private Point pStart, pEnd;
    private double mouseX, mouseY;
    int state;
}
